plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs'
    id 'dagger.hilt.android.plugin'
}
apply from: "$rootDir/app/base.gradle"
apply from: "$rootDir/app/authentication.gradle"

android {
    defaultConfig {
        applicationId "com.franzandel.dicodingexpertsubmission"
    }

    signingConfigs {
        release {
            keyAlias releaseAliasKeystore
            keyPassword releasePassKeystore
            storeFile file("$rootDir/dicoding_expert_release.keystore")
            storePassword releasePassKeystore
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "Debug-Gamer"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            resValue "string", "app_name", "Gamer"
        }
        all {
            buildConfigField 'String', "GAMES_BASE_URL" , '"https://api.rawg.io/api/"'
            buildConfigField 'String', "GAMES_API_KEY" , "\"$gamesApiKey\""
            buildConfigField 'String', "CERT_PINNER_1" , "\"$certPinner1\""
            buildConfigField 'String', "CERT_PINNER_2" , "\"$certPinner2\""
            buildConfigField 'String', "CERT_PINNER_3" , "\"$certPinner3\""
            buildConfigField 'String', "DB_KEY" , "\"$dbKey\""
            buildConfigField 'String', "SESSION_KEY" , "\"$sessionKey\""
        }
    }

    dynamicFeatures = [':feature_home', ':feature_favorite', ':feature_settings']
}

dependencies {
    api project(":core")

    api "androidx.core:core-ktx:${versions.coreKtx}"
    api "androidx.constraintlayout:constraintlayout:${versions.constraintLayout}"
    api "androidx.navigation:navigation-fragment-ktx:${versions.navigation}"
    api "androidx.navigation:navigation-ui-ktx:${versions.navigation}"
    api "androidx.navigation:navigation-dynamic-features-fragment:${versions.navigation}"
    api "androidx.legacy:legacy-support-v4:${versions.legacySupport}"
    api "androidx.preference:preference-ktx:${versions.preferenceKtx}"

    testImplementation "junit:junit:${testVersions.junit}"
    androidTestImplementation "androidx.test.ext:junit:${testVersions.junitExt}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${testVersions.espressoCore}"

    // by viewModels()
    api "androidx.activity:activity-ktx:${versions.activityKtx}"
    api "androidx.fragment:fragment-ktx:${versions.fragmentKtx}"

    api "androidx.room:room-runtime:${versions.room}"
    kapt "androidx.room:room-compiler:${versions.room}"
    // optional - Kotlin Extensions and Coroutines support for Room
    api "androidx.room:room-ktx:${versions.room}"

    api "com.github.bumptech.glide:glide:${versions.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${versions.glide}"

    api "androidx.paging:paging-runtime-ktx:${versions.pagingRuntimeKtx}"

    api "net.zetetic:android-database-sqlcipher:${versions.sqlCipher}"
    api "androidx.sqlite:sqlite-ktx:${versions.sqliteKtx}"

    api "androidx.security:security-crypto:${versions.securityCrypto}"
    api "com.scottyab:secure-preferences-lib:${versions.securePreferencesLib}"
}